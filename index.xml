<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>メモ</title><link>https://kaito-aai.github.io/</link><description>Recent content on メモ</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Jun 2022 17:30:11 +0900</lastBuildDate><atom:link href="https://kaito-aai.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>React: i18nextで多言語対応</title><link>https://kaito-aai.github.io/posts/react/multilang-i18next/</link><pubDate>Wed, 29 Jun 2022 17:30:11 +0900</pubDate><guid>https://kaito-aai.github.io/posts/react/multilang-i18next/</guid><description>Reactで多言語対応をしたときの手順メモ
言語はブラウザに設定されたものを利用する前提
使うもの
https://www.i18next.com/ https://github.com/i18next/i18next-browser-languageDetector/tree/master i18next-browser-languagedetectorでブラウザの言語を扱えるようになる 1. インストール npm install react-i18next i18next i18next-browser-languagedetector &amp;ndash;save
2. 設定 i18n用ファイルを用意し、多言語用リソースを扱うための諸々を設定
以下のファイルを追加
i18n.ts
import i18n from &amp;#34;i18next&amp;#34;; import LanguageDetector from &amp;#39;i18next-browser-languagedetector&amp;#39;; import { initReactI18next } from &amp;#34;react-i18next&amp;#34;; const resources = { ja: { translation: { &amp;#34;Title&amp;#34;: &amp;#34;ホームページ&amp;#34;, } }, en: { translation: { &amp;#34;Title&amp;#34;: &amp;#34;Home Page&amp;#34;, } } }; i18n.use(initReactI18next) .use(LanguageDetector) .init({ // lng: &amp;#39;en&amp;#39; &amp;lt;-　LanguageDetectorが機能しないのでこの設定は削除 resources, fallbackLng: &amp;#39;en&amp;#39;, supportedLngs: [&amp;#39;en&amp;#39;, &amp;#39;ja&amp;#39;], interpolation: { escapeValue: false }, detection: { // navigatorの優先度を上げる order: [&amp;#39;navigator&amp;#39;], // デフォルトの設定だとlocalStorage, cookieにcacheするようになっている。 // ブラウザの設定を参照したいので削除 caches: [] } }) export default i18n; 3.</description></item><item><title>Widening</title><link>https://kaito-aai.github.io/posts/typescript/ts2322errorwhenstyling/</link><pubDate>Mon, 27 Jun 2022 23:58:38 +0900</pubDate><guid>https://kaito-aai.github.io/posts/typescript/ts2322errorwhenstyling/</guid><description>Widening ReactでコンポーネントをスタイリングしていたらTypescript関連のエラーがでたのでメモ。
以下のようなコードを書いた
const Component = () =&amp;gt; { const divStyle = { display: &amp;#34;flex&amp;#34;, flexDirection: &amp;#34;row&amp;#34;, }; return ( &amp;lt;div style={divStyle}&amp;gt;&amp;lt;/div&amp;gt; ); } 出てきたエラー
Type &amp;lsquo;{ display: string; flexDirection: string; }&amp;rsquo; is not assignable to type &amp;lsquo;Properties&amp;lt;string | number, string &amp;amp; {}&amp;gt;&amp;rsquo;. Types of property &amp;lsquo;flexDirection&amp;rsquo; are incompatible. Type &amp;lsquo;string&amp;rsquo; is not assignable to type &amp;lsquo;FlexDirection | undefined&amp;rsquo;.ts(2322)
FlexDirection型を設定すべきところ、&amp;ldquo;row&amp;quot;がstring型になってしまっていた (TypescriptのWideningによるもの)
const assertionでWideningを抑制して解決
以下のコードに修正
const Component = () =&amp;gt; { const divStyle = { display: &amp;#34;flex&amp;#34;, flexDirection: &amp;#34;row&amp;#34; as const, // const assertion }; return ( &amp;lt;div style={divStyle}&amp;gt;&amp;lt;/div&amp;gt; ); }</description></item><item><title>Hello</title><link>https://kaito-aai.github.io/posts/hello/</link><pubDate>Mon, 27 Jun 2022 01:05:38 +0900</pubDate><guid>https://kaito-aai.github.io/posts/hello/</guid><description>テストページ aaa
a b c abcde
interface A { prop: string; } var a: A = { prop: &amp;#34;a&amp;#34; }; alert(a);</description></item></channel></rss>